<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>PDF Preview</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        iframe {
            border: 1px solid #e5e7eb;
            width: 100%;
            height: 100%;
            border-radius: 0.5rem;
        }
        .preview-container {
            display: flex;
            gap: 20px;
        }
        .controls {
            width: 350px;
            flex-shrink: 0;
        }
        .preview {
            flex-grow: 1;
        }
    </style>
</head>
<body class="p-6 bg-gray-50 h-screen">
    <div class="preview-container h-full">
        <div class="controls">
            <div class="bg-white p-6 rounded-xl shadow-lg h-full">
                <h2 class="text-xl font-semibold text-gray-800 mb-6">PDF Configuration</h2>
                <form id="pdfForm" class="space-y-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">URL</label>
                        <div class="flex gap-2">
                            <input type="url" id="url" required 
                                   class="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150"
                                   placeholder="https://example.com">
                            <button type="button" id="copyUrlButton"
                                    class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150"
                                    title="Copy PDF URL to clipboard">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3" />
                                </svg>
                            </button>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Format</label>
                            <select id="format" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 bg-white">
                                <option value="A4">A4</option>
                                <option value="Letter">Letter</option>
                                <option value="Legal">Legal</option>
                            </select>
                        </div>
                        
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Scale</label>
                            <input type="number" id="scale" value="1.0" step="0.1" min="0.1" max="2"
                                   class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Orientation</label>
                            <select id="landscape" class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150 bg-white">
                                <option value="false">Portrait</option>
                                <option value="true">Landscape</option>
                            </select>
                        </div>
                        
                        <div class="flex items-center">
                            <label class="block text-sm font-medium text-gray-700 mb-1 mt-6 select-none">
                                <input type="checkbox" id="printBackground" checked class="mr-2 h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded">
                                Print Background
                            </label>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-3">Margins (mm)</label>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label for="marginTop" class="block text-sm font-medium text-gray-700 mb-1">Top (mm)</label>
                                <input type="number" id="marginTop" value="0" min="0"
                                       class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
                            </div>
                            <div>
                                <label for="marginRight" class="block text-sm font-medium text-gray-700 mb-1">Right (mm)</label>
                                <input type="number" id="marginRight" value="0" min="0"
                                       class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
                            </div>
                            <div>
                                <label for="marginBottom" class="block text-sm font-medium text-gray-700 mb-1">Bottom (mm)</label>
                                <input type="number" id="marginBottom" value="0" min="0"
                                       class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
                            </div>
                            <div>
                                <label for="marginLeft" class="block text-sm font-medium text-gray-700 mb-1">Left (mm)</label>
                                <input type="number" id="marginLeft" value="0" min="0"
                                       class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition duration-150">
                            </div>
                        </div>
                    </div>

                    <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition duration-150 mt-6">
                        Generate Preview
                    </button>
                </form>
                
                <!-- Status Messages -->
                <div id="statusMessage" class="mt-4 hidden">
                    <div class="p-4 rounded-lg">
                        <p class="text-sm"></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="preview">
            <div id="loadingOverlay" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 backdrop-blur-sm">
                <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-white p-6 rounded-xl shadow-xl">
                    <div class="animate-spin rounded-full h-12 w-12 border-4 border-indigo-600 border-t-transparent mx-auto"></div>
                    <p class="mt-4 text-gray-700 text-center font-medium">Generating PDF preview...</p>
                </div>
            </div>
            <iframe id="pdfViewer" class="shadow-lg"></iframe>
        </div>
    </div>

    <script>
        const showStatus = (message, type = 'info') => {
            const statusEl = document.getElementById('statusMessage');
            const messageEl = statusEl.querySelector('p');
            statusEl.classList.remove('hidden');
            messageEl.textContent = message;
            
            // Set color based on message type
            const colors = {
                error: 'bg-red-100 text-red-700',
                success: 'bg-green-100 text-green-700',
                info: 'bg-blue-100 text-blue-700'
            };
            statusEl.querySelector('div').className = `p-4 rounded-md ${colors[type]}`;
        };

        const validateUrl = (url) => {
            try {
                new URL(url);
                return true;
            } catch {
                return false;
            }
        };

        document.getElementById('url').addEventListener('input', (e) => {
            const url = e.target.value;
            if (url && !validateUrl(url)) {
                showStatus('Please enter a valid URL starting with http:// or https://', 'error');
            } else {
                document.getElementById('statusMessage').classList.add('hidden');
            }
        });

        let currentPdfUrl = '';

        document.getElementById('pdfForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const url = document.getElementById('url').value;
            if (!validateUrl(url)) {
                showStatus('Please enter a valid URL starting with http:// or https://', 'error');
                return;
            }

            const loadingOverlay = document.getElementById('loadingOverlay');
            loadingOverlay.classList.remove('hidden');
            document.getElementById('statusMessage').classList.add('hidden');
            
            const pdfOptions = {
                format: document.getElementById('format').value,
                scale: parseFloat(document.getElementById('scale').value),
                landscape: document.getElementById('landscape').value === 'true',
                printBackground: document.getElementById('printBackground').checked,
                margin: {
                    top: document.getElementById('marginTop').value + 'mm',
                    right: document.getElementById('marginRight').value + 'mm',
                    bottom: document.getElementById('marginBottom').value + 'mm',
                    left: document.getElementById('marginLeft').value + 'mm'
                }
            };

            try {
                const queryString = new URLSearchParams({
                    url: url,
                    options: JSON.stringify(pdfOptions)
                }).toString();

                const iframe = document.getElementById('pdfViewer');
                iframe.onload = () => {
                    loadingOverlay.classList.add('hidden');
                    showStatus('PDF generated successfully!', 'success');
                    currentPdfUrl = iframe.src;
                };
                
                iframe.onerror = async () => {
                    loadingOverlay.classList.add('hidden');
                    try {
                        const response = await fetch(`/pdf?${queryString}`);
                        const data = await response.json();
                        showStatus(data.userMessage || 'Failed to generate PDF. Please try again.', 'error');
                    } catch {
                        showStatus('Failed to generate PDF. Please try again.', 'error');
                    }
                };

                iframe.src = `/pdf?${queryString}`;
            } catch (error) {
                loadingOverlay.classList.add('hidden');
                showStatus('An error occurred while generating the PDF.', 'error');
            }
        });

        // Copy to clipboard functionality
        document.getElementById('copyUrlButton').addEventListener('click', async () => {
            if (!currentPdfUrl) {
                showStatus('Generate a PDF first to copy its URL', 'info');
                return;
            }

            try {
                await navigator.clipboard.writeText(currentPdfUrl);
                showStatus('PDF URL copied to clipboard!', 'success');
            } catch (err) {
                showStatus('Failed to copy URL to clipboard', 'error');
            }
        });
    </script>
</body>
</html>